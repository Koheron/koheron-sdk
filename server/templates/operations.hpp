/// Autogenerated DO NOT EDIT
///
/// (c) Koheron

#ifndef __OPERATIONS_HPP__
#define __OPERATIONS_HPP__

{% for driver in drivers -%}
{% for include in driver.includes -%}
#include <{{ include }}>
{% endfor -%}
{% endfor %}

namespace op {
{% for driver in drivers -%}
namespace {{ driver.nameÂ }} {
    {% for operation in driver.operations -%}
    constexpr uint32_t {{ operation['name'] }} = ({{ driver.id }} << 16) + {{ operation['id'] }};
    {% endfor -%}
}
{% endfor %}
}

// Type checking
template<uint32_t id> struct arg_types;
template<uint32_t id> using arg_types_t = typename arg_types<id>::type;
 template<uint32_t id> struct ret_type;
template<uint32_t id> using ret_type_t = typename ret_type<id>::type;

{% for driver in drivers -%}
    {% for operation in driver.operations -%}

    template<>
    struct arg_types<op::{{ driver.name }}::{{ operation['name'] }}> {
        using type = std::tuple<
            {%- for arg in operation['arguments'] -%}
                {%- if not loop.last -%}
                    {{ arg['type'] }},
                {%- else -%}
                    {{ arg['type'] }}
                {%- endif -%}
            {%- endfor -%}
        >;
    };

    template<>
    struct ret_type<op::{{ driver.name }}::{{ operation['name'] }}> {
        using type = std::decay_t<{{ driver.name | get_exact_ret_type(operation) }}>;
    };

    {% endfor -%}
{% endfor %}

#endif // __OPERATIONS_HPP__